---
alwaysApply: true
description: Unity UPM插件开发规范和项目结构指南
---

# Unity UPM插件开发规范

## 多插件项目架构

### 项目根目录结构
```
ProjectRoot/
├── Assets/
│   ├── PluginA/          # 第一个插件
│   ├── PluginB/          # 第二个插件
│   └── Shared/           # 共享代码库
├── Packages/             # UPM包输出目录
│   ├── com.ezgame.plugina/
│   ├── com.ezgame.pluginb/
│   └── com.ezgame.shared/
└── Build/                # 构建脚本和配置
    ├── Scripts/
    └── Configs/
```

### 单个插件标准目录结构（每个插件独立DLL）
```
Assets/[PluginName]/
├── Runtime/
│   ├── Scripts/          # 运行时代码（编译为Runtime DLL）
│   │   ├── Core/
│   │   ├── Utils/
│   │   └── [PluginName].Runtime.asmdef
│   ├── Resources/        # 运行时资源
│   └── Shaders/         # 着色器资源
├── Editor/
│   ├── Scripts/          # 编辑器代码（编译为Editor DLL）
│   │   ├── Windows/
│   │   ├── Inspectors/
│   │   ├── MenuItems/
│   │   └── [PluginName].Editor.asmdef
│   └── Resources/        # 编辑器资源
├── Tests/
│   ├── Runtime/
│   │   ├── Scripts/
│   │   └── [PluginName].Tests.Runtime.asmdef
│   └── Editor/
│       ├── Scripts/
│       └── [PluginName].Tests.Editor.asmdef
├── Documentation~/       # 文档（Unity忽略）
├── Samples~/            # 示例代码
├── package.json         # UPM包配置
└── CHANGELOG.md         # 版本更新日志
```

## Assembly Definition配置

### Runtime Assembly Definition (.asmdef)
```json
{
  "name": "EzGame.SnapShoot.Runtime",
  "rootNamespace": "EzGame.SnapShoot",
  "references": [
    "EzGame.Shared.Runtime"
  ],
  "includePlatforms": [],
  "excludePlatforms": [],
  "allowUnsafeCode": false,
  "overrideReferences": false,
  "precompiledReferences": [],
  "autoReferenced": true,
  "defineConstraints": [],
  "versionDefines": [],
  "noEngineReferences": false
}
```

### Editor Assembly Definition (.asmdef)
```json
{
  "name": "EzGame.SnapShoot.Editor",
  "rootNamespace": "EzGame.SnapShoot.Editor",
  "references": [
    "EzGame.SnapShoot.Runtime",
    "EzGame.Shared.Runtime",
    "EzGame.Shared.Editor"
  ],
  "includePlatforms": [
    "Editor"
  ],
  "excludePlatforms": [],
  "allowUnsafeCode": false,
  "overrideReferences": false,
  "precompiledReferences": [],
  "autoReferenced": true,
  "defineConstraints": [],
  "versionDefines": [],
  "noEngineReferences": false
}
```

## 命名规范

### 插件命名
- **插件目录**: PascalCase，如 `SnapShoot`, `AssetManager`
- **UPM包名**: 小写+点分隔，如 `com.ezgame.snapshoot`
- **Assembly名**: 完整层级，如 `EzGame.SnapShoot.Runtime`
- **命名空间**: 与Assembly名一致，如 `EzGame.SnapShoot`

### 代码命名
- **类名**: PascalCase，如 `HierarchyToXML`
- **方法名**: PascalCase，如 `GetCurrentSceneHierarchy`
- **字段**: camelCase，私有字段建议使用下划线前缀，如 `_xmlDocument`
- **常量**: UPPER_CASE，如 `DEFAULT_EXPORT_PATH`

## 多插件依赖管理

### 共享代码库结构
```
Assets/Shared/
├── Runtime/
│   ├── Scripts/
│   │   ├── Common/       # 通用工具类
│   │   ├── Extensions/   # 扩展方法
│   │   ├── Interfaces/   # 公共接口
│   │   └── EzGame.Shared.Runtime.asmdef
│   └── Resources/
└── Editor/
    ├── Scripts/
    │   ├── Utilities/    # 编辑器工具
    │   ├── Windows/      # 通用编辑器窗口
    │   └── EzGame.Shared.Editor.asmdef
    └── Resources/
```

### 插件间依赖配置
```json
// PluginB依赖PluginA的情况
{
  "name": "EzGame.PluginB.Runtime",
  "references": [
    "EzGame.PluginA.Runtime",
    "EzGame.Shared.Runtime"
  ]
}
```

## Package.json规范

### 基础插件配置
```json
{
  "name": "com.ezgame.snapshoot",
  "version": "1.0.0",
  "displayName": "EZ Snap Shoot",
  "description": "Unity场景层级快照工具",
  "unity": "2021.3",
  "keywords": ["hierarchy", "snapshot", "xml", "tool"],
  "category": "Editor Extensions",
  "author": {
    "name": "EzGame",
    "email": "support@ezgame.com",
    "url": "https://ezgame.com"
  },
  "license": "MIT",
  "dependencies": {
    "com.ezgame.shared": "1.0.0"
  },
  "samples": [
    {
      "displayName": "Basic Usage",
      "description": "基本使用示例",
      "path": "Samples~/BasicUsage"
    }
  ],
  "documentationUrl": "https://docs.ezgame.com/snapshoot",
  "changelogUrl": "https://docs.ezgame.com/snapshoot/changelog",
  "licensesUrl": "https://docs.ezgame.com/snapshoot/license"
}
```

## 构建和发布流程

### 自动化构建脚本
```csharp
// BuildTool.cs - 放置在 Build/Scripts/ 目录下
public static class PluginBuilder
{
    [MenuItem("Build/Export All Plugins")]
    public static void ExportAllPlugins()
    {
        var plugins = new string[] { "SnapShoot", "AssetManager", "SceneTools" };
        
        foreach (var plugin in plugins)
        {
            ExportPlugin(plugin);
        }
    }
    
    private static void ExportPlugin(string pluginName)
    {
        var sourcePath = $"Assets/{pluginName}";
        var targetPath = $"Packages/com.ezgame.{pluginName.ToLower()}";
        
        // 复制文件并生成UPM包结构
        CopyPluginFiles(sourcePath, targetPath);
        GeneratePackageJson(pluginName, targetPath);
    }
}
```

### 版本管理策略
- **主版本号**: 不兼容的API更改
- **次版本号**: 向后兼容的功能添加
- **修订版本号**: 向后兼容的问题修复
- **预发布标识**: alpha, beta, rc

示例版本: `1.2.3-beta.1`

## DLL编译优化

### Assembly Definition最佳实践
```json
{
  "name": "EzGame.SnapShoot.Runtime",
  "rootNamespace": "EzGame.SnapShoot",
  "references": [
    "EzGame.Shared.Runtime"
  ],
  "optionalUnityReferences": [],
  "includePlatforms": [],
  "excludePlatforms": [],
  "allowUnsafeCode": false,
  "overrideReferences": false,
  "precompiledReferences": [],
  "autoReferenced": true,
  "defineConstraints": [],
  "versionDefines": [
    {
      "name": "com.ezgame.shared",
      "expression": "1.0.0",
      "define": "EZGAME_SHARED_AVAILABLE"
    }
  ],
  "noEngineReferences": false
}
```

### 编译条件控制
```csharp
namespace EzGame.SnapShoot
{
    public static class PluginInfo
    {
        public const string PLUGIN_NAME = "EZ Snap Shoot";
        public const string VERSION = "1.0.0";
        
        #if EZGAME_SHARED_AVAILABLE
        public static void InitializeWithShared()
        {
            EzGame.Shared.PluginManager.RegisterPlugin(PLUGIN_NAME, VERSION);
        }
        #endif
    }
}
```

## 开发最佳实践

### 1. 模块化设计
```csharp
// 每个插件应该有清晰的入口点
namespace EzGame.SnapShoot
{
    public static class SnapShootPlugin
    {
        public static void Initialize()
        {
            // 插件初始化逻辑
            RegisterServices();
            SetupEventHandlers();
        }
        
        public static void Shutdown()
        {
            // 插件清理逻辑
            UnregisterServices();
            CleanupEventHandlers();
        }
    }
}
```

### 2. 插件间通信
```csharp
// 使用事件系统进行插件间通信
public static class PluginEvents
{
    public static event System.Action<string> OnPluginLoaded;
    public static event System.Action<string, object> OnDataShared;
    
    public static void NotifyPluginLoaded(string pluginName)
    {
        OnPluginLoaded?.Invoke(pluginName);
    }
}
```

### 3. 资源管理
```csharp
public static class ResourceManager
{
    private static Dictionary<string, Object> _loadedResources = new Dictionary<string, Object>();
    
    public static T LoadResource<T>(string path) where T : Object
    {
        if (_loadedResources.TryGetValue(path, out var cached))
        {
            return cached as T;
        }
        
        var resource = Resources.Load<T>(path);
        if (resource != null)
        {
            _loadedResources[path] = resource;
        }
        
        return resource;
    }
}
```

### 4. 错误处理和日志
```csharp
public static class PluginLogger
{
    private static readonly string LOG_PREFIX = "[EZGame]";
    
    public static void Log(string pluginName, string message)
    {
        Debug.Log($"{LOG_PREFIX}[{pluginName}] {message}");
    }
    
    public static void LogError(string pluginName, string message)
    {
        Debug.LogError($"{LOG_PREFIX}[{pluginName}] {message}");
    }
}
```

### 5. 单元测试结构
```csharp
// Tests/Runtime/SnapShootTests.cs
[TestFixture]
public class SnapShootTests
{
    [SetUp]
    public void SetUp()
    {
        // 测试环境准备
    }
    
    [Test]
    public void ExportHierarchy_ShouldCreateValidXML()
    {
        // 测试逻辑
        Assert.IsNotNull(HierarchyToXML.GetCurrentSceneHierarchyToXML());
    }
    
    [TearDown]
    public void TearDown()
    {
        // 测试环境清理
    }
}
```

## 性能和兼容性

### 1. 延迟加载
```csharp
public class LazyPluginService
{
    private static PluginService _instance;
    public static PluginService Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = new PluginService();
            }
            return _instance;
        }
    }
}
```

### 2. 条件编译
```csharp
#if UNITY_2021_3_OR_NEWER
    // 使用新版本API
    using UnityEngine.Rendering;
#else
    // 使用旧版本API兼容
    using UnityEngine.Experimental.Rendering;
#endif
```

### 3. 内存优化
```csharp
public class PluginMemoryManager
{
    private static readonly List<IDisposable> _disposables = new List<IDisposable>();
    
    public static void RegisterDisposable(IDisposable disposable)
    {
        _disposables.Add(disposable);
    }
    
    public static void CleanupAll()
    {
        foreach (var disposable in _disposables)
        {
            disposable?.Dispose();
        }
        _disposables.Clear();
    }
}
```